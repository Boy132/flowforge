// resources/js/flowforge.js
function flowforge({ state }) {
  return {
    state,
    columns: state.columns,
    currentColumn: null,
    currentCard: null,
    formData: {},
    isLoading: {},
    init: function() {
      this.$wire.$on("kanban-card-created", (data) => {
        const id = data[0].id;
        const status = data[0].status;
        this.$dispatch("close-modal", { id: "create-card-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-add");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-add");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-card-updated", (data) => {
        const id = data[0].id;
        this.$dispatch("close-modal", { id: "edit-card-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-move");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-move");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-card-deleted", (data) => {
        const id = data[0].id;
        this.$dispatch("close-modal", { id: "edit-card-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-delete");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-delete");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-items-loaded", (data) => {
        const columnId = data[0]?.columnId;
        if (columnId) {
          this.isLoading[columnId] = false;
        }
      });
    },
    /**
     * Check if we're loading items for a specific column
     */
    isLoadingColumn(columnId) {
      return this.isLoading[columnId] || false;
    },
    /**
     * Begin loading more items for a column
     */
    beginLoading(columnId) {
      this.isLoading[columnId] = true;
    }
  };
}
export {
  flowforge as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vanMvZmxvd2ZvcmdlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbG93Zm9yZ2Uoe3N0YXRlfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBjb2x1bW5zOiBzdGF0ZS5jb2x1bW5zLFxuICAgICAgICBjdXJyZW50Q29sdW1uOiBudWxsLFxuICAgICAgICBjdXJyZW50Q2FyZDogbnVsbCxcbiAgICAgICAgZm9ybURhdGE6IHt9LFxuICAgICAgICBpc0xvYWRpbmc6IHt9LFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2FyZCBjcmVhdGlvblxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1jYXJkLWNyZWF0ZWQnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YVswXS5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBkYXRhWzBdLnN0YXR1cztcblxuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjbG9zZS1tb2RhbCcsIHsgaWQ6ICdjcmVhdGUtY2FyZC1tb2RhbCcgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgdGhlIG5ldyBjYXJkXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3gtc29ydGFibGUtaXRlbT1cIiR7aWR9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1hZGQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUta2FuYmFuLWNhcmQtYWRkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNhcmQgdXBkYXRlXG4gICAgICAgICAgICB0aGlzLiR3aXJlLiRvbigna2FuYmFuLWNhcmQtdXBkYXRlZCcsIChkYXRhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGRhdGFbMF0uaWQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnY2xvc2UtbW9kYWwnLCB7IGlkOiAnZWRpdC1jYXJkLW1vZGFsJyB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEhpZ2hsaWdodCB0aGUgdXBkYXRlZCBjYXJkXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3gtc29ydGFibGUtaXRlbT1cIiR7aWR9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1tb3ZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWthbmJhbi1jYXJkLW1vdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2FyZCBkZWxldGlvblxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1jYXJkLWRlbGV0ZWQnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YVswXS5pZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjbG9zZS1tb2RhbCcsIHsgaWQ6ICdlZGl0LWNhcmQtbW9kYWwnIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IHRoZSBkZWxldGVkIGNhcmRcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbeC1zb3J0YWJsZS1pdGVtPVwiJHtpZH1cIl1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLWthbmJhbi1jYXJkLWRlbGV0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1kZWxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciB3aGVuIGl0ZW1zIGFyZSBsb2FkZWRcbiAgICAgICAgICAgIHRoaXMuJHdpcmUuJG9uKCdrYW5iYW4taXRlbXMtbG9hZGVkJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHNwZWNpZmljIGNvbHVtbiB0aGF0IHdhcyB1cGRhdGVkXG4gICAgICAgICAgICAgICAgY29uc3QgY29sdW1uSWQgPSBkYXRhWzBdPy5jb2x1bW5JZDtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFyIGxvYWRpbmcgc3RhdGUgZm9yIHRoaXMgY29sdW1uXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nW2NvbHVtbklkXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBpZiB3ZSdyZSBsb2FkaW5nIGl0ZW1zIGZvciBhIHNwZWNpZmljIGNvbHVtblxuICAgICAgICAgKi9cbiAgICAgICAgaXNMb2FkaW5nQ29sdW1uKGNvbHVtbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0xvYWRpbmdbY29sdW1uSWRdIHx8IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCZWdpbiBsb2FkaW5nIG1vcmUgaXRlbXMgZm9yIGEgY29sdW1uXG4gICAgICAgICAqL1xuICAgICAgICBiZWdpbkxvYWRpbmcoY29sdW1uSWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nW2NvbHVtbklkXSA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFlLFNBQVIsVUFBMkIsRUFBQyxNQUFLLEdBQUc7QUFDdkMsU0FBTztBQUFBLElBQ0g7QUFBQSxJQUNBLFNBQVMsTUFBTTtBQUFBLElBQ2YsZUFBZTtBQUFBLElBQ2YsYUFBYTtBQUFBLElBQ2IsVUFBVSxDQUFDO0FBQUEsSUFDWCxXQUFXLENBQUM7QUFBQSxJQUVaLE1BQU0sV0FBWTtBQUVkLFdBQUssTUFBTSxJQUFJLHVCQUF1QixDQUFDLFNBQVM7QUFDNUMsY0FBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ25CLGNBQU0sU0FBUyxLQUFLLENBQUMsRUFBRTtBQUV2QixhQUFLLFVBQVUsZUFBZSxFQUFFLElBQUksb0JBQW9CLENBQUM7QUFHekQsbUJBQVcsTUFBTTtBQUNiLGdCQUFNLGNBQWMsU0FBUyxjQUFjLHFCQUFxQixFQUFFLElBQUk7QUFDdEUsY0FBSSxhQUFhO0FBQ2Isd0JBQVksVUFBVSxJQUFJLHlCQUF5QjtBQUNuRCx1QkFBVyxNQUFNO0FBQ2IsMEJBQVksVUFBVSxPQUFPLHlCQUF5QjtBQUFBLFlBQzFELEdBQUcsR0FBRztBQUFBLFVBQ1Y7QUFBQSxRQUNKLEdBQUcsR0FBRztBQUFBLE1BQ1YsQ0FBQztBQUdELFdBQUssTUFBTSxJQUFJLHVCQUF1QixDQUFDLFNBQVM7QUFFNUMsY0FBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBRW5CLGFBQUssVUFBVSxlQUFlLEVBQUUsSUFBSSxrQkFBa0IsQ0FBQztBQUd2RCxtQkFBVyxNQUFNO0FBQ2IsZ0JBQU0sY0FBYyxTQUFTLGNBQWMscUJBQXFCLEVBQUUsSUFBSTtBQUN0RSxjQUFJLGFBQWE7QUFDYix3QkFBWSxVQUFVLElBQUksMEJBQTBCO0FBQ3BELHVCQUFXLE1BQU07QUFDYiwwQkFBWSxVQUFVLE9BQU8sMEJBQTBCO0FBQUEsWUFDM0QsR0FBRyxHQUFHO0FBQUEsVUFDVjtBQUFBLFFBQ0osR0FBRyxHQUFHO0FBQUEsTUFDVixDQUFDO0FBR0QsV0FBSyxNQUFNLElBQUksdUJBQXVCLENBQUMsU0FBUztBQUM1QyxjQUFNLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFFbkIsYUFBSyxVQUFVLGVBQWUsRUFBRSxJQUFJLGtCQUFrQixDQUFDO0FBR3ZELG1CQUFXLE1BQU07QUFDYixnQkFBTSxjQUFjLFNBQVMsY0FBYyxxQkFBcUIsRUFBRSxJQUFJO0FBQ3RFLGNBQUksYUFBYTtBQUNiLHdCQUFZLFVBQVUsSUFBSSw0QkFBNEI7QUFDdEQsdUJBQVcsTUFBTTtBQUNiLDBCQUFZLFVBQVUsT0FBTyw0QkFBNEI7QUFBQSxZQUM3RCxHQUFHLEdBQUc7QUFBQSxVQUNWO0FBQUEsUUFDSixHQUFHLEdBQUc7QUFBQSxNQUNWLENBQUM7QUFHRCxXQUFLLE1BQU0sSUFBSSx1QkFBdUIsQ0FBQyxTQUFTO0FBRTVDLGNBQU0sV0FBVyxLQUFLLENBQUMsR0FBRztBQUcxQixZQUFJLFVBQVU7QUFDVixlQUFLLFVBQVUsUUFBUSxJQUFJO0FBQUEsUUFDL0I7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNMO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLQSxnQkFBZ0IsVUFBVTtBQUN0QixhQUFPLEtBQUssVUFBVSxRQUFRLEtBQUs7QUFBQSxJQUN2QztBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EsYUFBYSxVQUFVO0FBQ25CLFdBQUssVUFBVSxRQUFRLElBQUk7QUFBQSxJQUMvQjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
