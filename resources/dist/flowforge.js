// resources/js/flowforge.js
function flowforge({ state }) {
  return {
    state,
    columns: state.columns,
    currentColumn: null,
    isLoading: {},
    init: function() {
      this.$wire.$on("kanban-record-created", (data) => {
        const id = data[0].id;
        const column = data[0].column;
        this.$dispatch("close-modal", { id: "create-record-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-add");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-add");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-record-updated", (data) => {
      });
      this.$wire.$on("kanban-record-deleted", (data) => {
        const id = data[0].id;
        this.$dispatch("close-modal", { id: "edit-record-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-delete");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-delete");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-items-loaded", (data) => {
        const columnId = data[0]?.columnId;
        if (columnId) {
          this.isLoading[columnId] = false;
        }
      });
      this.$wire.$on("close-modal", (data) => {
      });
    },
    /**
     * Check if we're loading items for a specific column
     */
    isLoadingColumn(columnId) {
      return this.isLoading[columnId] || false;
    },
    /**
     * Begin loading more items for a column
     */
    beginLoading(columnId) {
      this.isLoading[columnId] = true;
    }
  };
}
export {
  flowforge as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vanMvZmxvd2ZvcmdlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbG93Zm9yZ2Uoe3N0YXRlfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBjb2x1bW5zOiBzdGF0ZS5jb2x1bW5zLFxuICAgICAgICBjdXJyZW50Q29sdW1uOiBudWxsLFxuICAgICAgICBpc0xvYWRpbmc6IHt9LFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2FyZCBjcmVhdGlvblxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1yZWNvcmQtY3JlYXRlZCcsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBkYXRhWzBdLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IGRhdGFbMF0uY29sdW1uO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2Nsb3NlLW1vZGFsJywgeyBpZDogJ2NyZWF0ZS1yZWNvcmQtbW9kYWwnIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IHRoZSBuZXcgY2FyZFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFt4LXNvcnRhYmxlLWl0ZW09XCIke2lkfVwiXWApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUta2FuYmFuLWNhcmQtYWRkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWthbmJhbi1jYXJkLWFkZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjYXJkIHVwZGF0ZVxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1yZWNvcmQtdXBkYXRlZCcsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gY29uc3QgcmVjb3JkRGF0YSA9IGRhdGFbMF0ucmVjb3JkO1xuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGlkID0gcmVjb3JkRGF0YS5pZDtcbiAgICAgICAgICAgICAgICAvLyBjb25zdCB0aXRsZUZpZWxkID0gdGhpcy5zdGF0ZS50aXRsZUZpZWxkO1xuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGRlc2NyaXB0aW9uRmllbGQgPSB0aGlzLnN0YXRlLmRlc2NyaXB0aW9uRmllbGQ7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjYXJkIGRlbGV0aW9uXG4gICAgICAgICAgICB0aGlzLiR3aXJlLiRvbigna2FuYmFuLXJlY29yZC1kZWxldGVkJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGRhdGFbMF0uaWQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnY2xvc2UtbW9kYWwnLCB7IGlkOiAnZWRpdC1yZWNvcmQtbW9kYWwnIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IHRoZSBkZWxldGVkIGNhcmRcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FyZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbeC1zb3J0YWJsZS1pdGVtPVwiJHtpZH1cIl1gKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcmRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLWthbmJhbi1jYXJkLWRlbGV0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1kZWxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciB3aGVuIGl0ZW1zIGFyZSBsb2FkZWRcbiAgICAgICAgICAgIHRoaXMuJHdpcmUuJG9uKCdrYW5iYW4taXRlbXMtbG9hZGVkJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHNwZWNpZmljIGNvbHVtbiB0aGF0IHdhcyB1cGRhdGVkXG4gICAgICAgICAgICAgICAgY29uc3QgY29sdW1uSWQgPSBkYXRhWzBdPy5jb2x1bW5JZDtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFyIGxvYWRpbmcgc3RhdGUgZm9yIHRoaXMgY29sdW1uXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nW2NvbHVtbklkXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiR3aXJlLiRvbignY2xvc2UtbW9kYWwnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMuJHdpcmUucmVzZXRFZGl0Rm9ybSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBpZiB3ZSdyZSBsb2FkaW5nIGl0ZW1zIGZvciBhIHNwZWNpZmljIGNvbHVtblxuICAgICAgICAgKi9cbiAgICAgICAgaXNMb2FkaW5nQ29sdW1uKGNvbHVtbklkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0xvYWRpbmdbY29sdW1uSWRdIHx8IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCZWdpbiBsb2FkaW5nIG1vcmUgaXRlbXMgZm9yIGEgY29sdW1uXG4gICAgICAgICAqL1xuICAgICAgICBiZWdpbkxvYWRpbmcoY29sdW1uSWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nW2NvbHVtbklkXSA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFlLFNBQVIsVUFBMkIsRUFBQyxNQUFLLEdBQUc7QUFDdkMsU0FBTztBQUFBLElBQ0g7QUFBQSxJQUNBLFNBQVMsTUFBTTtBQUFBLElBQ2YsZUFBZTtBQUFBLElBQ2YsV0FBVyxDQUFDO0FBQUEsSUFFWixNQUFNLFdBQVk7QUFFZCxXQUFLLE1BQU0sSUFBSSx5QkFBeUIsQ0FBQyxTQUFTO0FBQzlDLGNBQU0sS0FBSyxLQUFLLENBQUMsRUFBRTtBQUNuQixjQUFNLFNBQVMsS0FBSyxDQUFDLEVBQUU7QUFFdkIsYUFBSyxVQUFVLGVBQWUsRUFBRSxJQUFJLHNCQUFzQixDQUFDO0FBRzNELG1CQUFXLE1BQU07QUFDYixnQkFBTSxjQUFjLFNBQVMsY0FBYyxxQkFBcUIsRUFBRSxJQUFJO0FBQ3RFLGNBQUksYUFBYTtBQUNiLHdCQUFZLFVBQVUsSUFBSSx5QkFBeUI7QUFDbkQsdUJBQVcsTUFBTTtBQUNiLDBCQUFZLFVBQVUsT0FBTyx5QkFBeUI7QUFBQSxZQUMxRCxHQUFHLEdBQUc7QUFBQSxVQUNWO0FBQUEsUUFDSixHQUFHLEdBQUc7QUFBQSxNQUNWLENBQUM7QUFHRCxXQUFLLE1BQU0sSUFBSSx5QkFBeUIsQ0FBQyxTQUFTO0FBQUEsTUFLbEQsQ0FBQztBQUdELFdBQUssTUFBTSxJQUFJLHlCQUF5QixDQUFDLFNBQVM7QUFDOUMsY0FBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBRW5CLGFBQUssVUFBVSxlQUFlLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQztBQUd6RCxtQkFBVyxNQUFNO0FBQ2IsZ0JBQU0sY0FBYyxTQUFTLGNBQWMscUJBQXFCLEVBQUUsSUFBSTtBQUN0RSxjQUFJLGFBQWE7QUFDYix3QkFBWSxVQUFVLElBQUksNEJBQTRCO0FBQ3RELHVCQUFXLE1BQU07QUFDYiwwQkFBWSxVQUFVLE9BQU8sNEJBQTRCO0FBQUEsWUFDN0QsR0FBRyxHQUFHO0FBQUEsVUFDVjtBQUFBLFFBQ0osR0FBRyxHQUFHO0FBQUEsTUFDVixDQUFDO0FBR0QsV0FBSyxNQUFNLElBQUksdUJBQXVCLENBQUMsU0FBUztBQUU1QyxjQUFNLFdBQVcsS0FBSyxDQUFDLEdBQUc7QUFHMUIsWUFBSSxVQUFVO0FBQ1YsZUFBSyxVQUFVLFFBQVEsSUFBSTtBQUFBLFFBQy9CO0FBQUEsTUFDSixDQUFDO0FBRUQsV0FBSyxNQUFNLElBQUksZUFBZSxDQUFDLFNBQVM7QUFBQSxNQUV4QyxDQUFDO0FBQUEsSUFDTDtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EsZ0JBQWdCLFVBQVU7QUFDdEIsYUFBTyxLQUFLLFVBQVUsUUFBUSxLQUFLO0FBQUEsSUFDdkM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLGFBQWEsVUFBVTtBQUNuQixXQUFLLFVBQVUsUUFBUSxJQUFJO0FBQUEsSUFDL0I7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
