// resources/js/flowforge.js
function flowforge({ state }) {
  return {
    state,
    columns: state.columns,
    currentColumn: null,
    currentCard: null,
    formData: {},
    init: function() {
      console.log("FlowForge Alpine component initialized");
      this.$wire.$on("kanban-card-created", (data) => {
        const id = data[0].id;
        const status = data[0].status;
        this.$dispatch("close-modal", { id: "create-card-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-add");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-add");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-card-updated", (data) => {
        const id = data[0].id;
        this.$dispatch("close-modal", { id: "edit-card-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-move");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-move");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-card-deleted", (data) => {
        const id = data[0].id;
        this.$dispatch("close-modal", { id: "edit-card-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-delete");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-delete");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-items-loaded", () => {
        this.initSortable();
      });
    },
    initSortable() {
    },
    /**
     * Helper function for success notifications (maintained for backward compatibility)
     */
    showSuccessNotification(message) {
      if (window.Filament && window.Filament.notify) {
        window.Filament.notify.success(message);
      } else {
        console.log("Success:", message);
      }
    },
    /**
     * Helper function for error notifications (maintained for backward compatibility)
     */
    showErrorNotification(message) {
      if (window.Filament && window.Filament.notify) {
        window.Filament.notify.error(message);
      } else {
        console.error("Error:", message);
      }
    }
  };
}
export {
  flowforge as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vanMvZmxvd2ZvcmdlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbG93Zm9yZ2Uoe3N0YXRlfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBjb2x1bW5zOiBzdGF0ZS5jb2x1bW5zLFxuICAgICAgICBjdXJyZW50Q29sdW1uOiBudWxsLFxuICAgICAgICBjdXJyZW50Q2FyZDogbnVsbCxcbiAgICAgICAgZm9ybURhdGE6IHt9LFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGbG93Rm9yZ2UgQWxwaW5lIGNvbXBvbmVudCBpbml0aWFsaXplZCcpXG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgZm9ybSBzdWJtaXNzaW9uIHN1Y2Nlc3MvZmFpbHVyZVxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1jYXJkLWNyZWF0ZWQnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YVswXS5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBkYXRhWzBdLnN0YXR1cztcblxuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjbG9zZS1tb2RhbCcsIHsgaWQ6ICdjcmVhdGUtY2FyZC1tb2RhbCcgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgdGhlIG5ldyBjYXJkXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3gtc29ydGFibGUtaXRlbT1cIiR7aWR9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1hZGQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUta2FuYmFuLWNhcmQtYWRkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLiR3aXJlLiRvbigna2FuYmFuLWNhcmQtdXBkYXRlZCcsIChkYXRhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGRhdGFbMF0uaWQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnY2xvc2UtbW9kYWwnLCB7IGlkOiAnZWRpdC1jYXJkLW1vZGFsJyB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEhpZ2hsaWdodCB0aGUgdXBkYXRlZCBjYXJkXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3gtc29ydGFibGUtaXRlbT1cIiR7aWR9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1tb3ZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWthbmJhbi1jYXJkLW1vdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJHdpcmUuJG9uKCdrYW5iYW4tY2FyZC1kZWxldGVkJywgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGRhdGFbMF0uaWQ7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRkaXNwYXRjaCgnY2xvc2UtbW9kYWwnLCB7IGlkOiAnZWRpdC1jYXJkLW1vZGFsJyB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEhpZ2hsaWdodCB0aGUgZGVsZXRlZCBjYXJkXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3gtc29ydGFibGUtaXRlbT1cIiR7aWR9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1kZWxldGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FuaW1hdGUta2FuYmFuLWNhcmQtZGVsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3Igd2hlbiBpdGVtcyBhcmUgbG9hZGVkXG4gICAgICAgICAgICB0aGlzLiR3aXJlLiRvbigna2FuYmFuLWl0ZW1zLWxvYWRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHNvcnRhYmxlIGZvciBuZXdseSBsb2FkZWQgaXRlbXNcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRTb3J0YWJsZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdFNvcnRhYmxlKCkge1xuICAgICAgICAgICAgLy8gUmUtaW5pdGlhbGl6ZSBzb3J0YWJsZSBmb3IgYWxsIGNvbHVtbnMgaWYgbmVlZGVkXG4gICAgICAgICAgICAvLyBUaGlzIGNvdWxkIGJlIGltcGxlbWVudGVkIGlmIG5lZWRlZCBmb3IgZHluYW1pY2FsbHkgbG9hZGVkIGNvbnRlbnRcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBzdWNjZXNzIG5vdGlmaWNhdGlvbnMgKG1haW50YWluZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpXG4gICAgICAgICAqL1xuICAgICAgICBzaG93U3VjY2Vzc05vdGlmaWNhdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICAvLyBUcmlnZ2VyIEZpbGFtZW50IG5vdGlmaWNhdGlvbiBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmICh3aW5kb3cuRmlsYW1lbnQgJiYgd2luZG93LkZpbGFtZW50Lm5vdGlmeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5GaWxhbWVudC5ub3RpZnkuc3VjY2VzcyhtZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3M6JywgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgZXJyb3Igbm90aWZpY2F0aW9ucyAobWFpbnRhaW5lZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcbiAgICAgICAgICovXG4gICAgICAgIHNob3dFcnJvck5vdGlmaWNhdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICAvLyBUcmlnZ2VyIEZpbGFtZW50IG5vdGlmaWNhdGlvbiBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmICh3aW5kb3cuRmlsYW1lbnQgJiYgd2luZG93LkZpbGFtZW50Lm5vdGlmeSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5GaWxhbWVudC5ub3RpZnkuZXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFlLFNBQVIsVUFBMkIsRUFBQyxNQUFLLEdBQUc7QUFDdkMsU0FBTztBQUFBLElBQ0g7QUFBQSxJQUNBLFNBQVMsTUFBTTtBQUFBLElBQ2YsZUFBZTtBQUFBLElBQ2YsYUFBYTtBQUFBLElBQ2IsVUFBVSxDQUFDO0FBQUEsSUFFWCxNQUFNLFdBQVk7QUFDZCxjQUFRLElBQUksd0NBQXdDO0FBR3BELFdBQUssTUFBTSxJQUFJLHVCQUF1QixDQUFDLFNBQVM7QUFDNUMsY0FBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ25CLGNBQU0sU0FBUyxLQUFLLENBQUMsRUFBRTtBQUV2QixhQUFLLFVBQVUsZUFBZSxFQUFFLElBQUksb0JBQW9CLENBQUM7QUFHekQsbUJBQVcsTUFBTTtBQUNiLGdCQUFNLGNBQWMsU0FBUyxjQUFjLHFCQUFxQixFQUFFLElBQUk7QUFDdEUsY0FBSSxhQUFhO0FBQ2Isd0JBQVksVUFBVSxJQUFJLHlCQUF5QjtBQUNuRCx1QkFBVyxNQUFNO0FBQ2IsMEJBQVksVUFBVSxPQUFPLHlCQUF5QjtBQUFBLFlBQzFELEdBQUcsR0FBRztBQUFBLFVBQ1Y7QUFBQSxRQUNKLEdBQUcsR0FBRztBQUFBLE1BQ1YsQ0FBQztBQUVELFdBQUssTUFBTSxJQUFJLHVCQUF1QixDQUFDLFNBQVM7QUFFNUMsY0FBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBRW5CLGFBQUssVUFBVSxlQUFlLEVBQUUsSUFBSSxrQkFBa0IsQ0FBQztBQUd2RCxtQkFBVyxNQUFNO0FBQ2IsZ0JBQU0sY0FBYyxTQUFTLGNBQWMscUJBQXFCLEVBQUUsSUFBSTtBQUN0RSxjQUFJLGFBQWE7QUFDYix3QkFBWSxVQUFVLElBQUksMEJBQTBCO0FBQ3BELHVCQUFXLE1BQU07QUFDYiwwQkFBWSxVQUFVLE9BQU8sMEJBQTBCO0FBQUEsWUFDM0QsR0FBRyxHQUFHO0FBQUEsVUFDVjtBQUFBLFFBQ0osR0FBRyxHQUFHO0FBQUEsTUFDVixDQUFDO0FBRUQsV0FBSyxNQUFNLElBQUksdUJBQXVCLENBQUMsU0FBUztBQUM1QyxjQUFNLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFFbkIsYUFBSyxVQUFVLGVBQWUsRUFBRSxJQUFJLGtCQUFrQixDQUFDO0FBR3ZELG1CQUFXLE1BQU07QUFDYixnQkFBTSxjQUFjLFNBQVMsY0FBYyxxQkFBcUIsRUFBRSxJQUFJO0FBQ3RFLGNBQUksYUFBYTtBQUNiLHdCQUFZLFVBQVUsSUFBSSw0QkFBNEI7QUFDdEQsdUJBQVcsTUFBTTtBQUNiLDBCQUFZLFVBQVUsT0FBTyw0QkFBNEI7QUFBQSxZQUM3RCxHQUFHLEdBQUc7QUFBQSxVQUNWO0FBQUEsUUFDSixHQUFHLEdBQUc7QUFBQSxNQUNWLENBQUM7QUFHRCxXQUFLLE1BQU0sSUFBSSx1QkFBdUIsTUFBTTtBQUV4QyxhQUFLLGFBQWE7QUFBQSxNQUN0QixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsZUFBZTtBQUFBLElBR2Y7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLHdCQUF3QixTQUFTO0FBRTdCLFVBQUksT0FBTyxZQUFZLE9BQU8sU0FBUyxRQUFRO0FBQzNDLGVBQU8sU0FBUyxPQUFPLFFBQVEsT0FBTztBQUFBLE1BQzFDLE9BQU87QUFDSCxnQkFBUSxJQUFJLFlBQVksT0FBTztBQUFBLE1BQ25DO0FBQUEsSUFDSjtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0Esc0JBQXNCLFNBQVM7QUFFM0IsVUFBSSxPQUFPLFlBQVksT0FBTyxTQUFTLFFBQVE7QUFDM0MsZUFBTyxTQUFTLE9BQU8sTUFBTSxPQUFPO0FBQUEsTUFDeEMsT0FBTztBQUNILGdCQUFRLE1BQU0sVUFBVSxPQUFPO0FBQUEsTUFDbkM7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
