// resources/js/flowforge.js
function flowforge({ state }) {
  return {
    state,
    columns: state.columns,
    currentColumn: null,
    currentCard: null,
    formData: {},
    init: function() {
      console.log("FlowForge Alpine component initialized");
      this.$wire.$on("kanban-card-created", ({ id, status }) => {
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-add");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-add");
            }, 500);
          }
        }, 100);
      });
      this.$wire.$on("kanban-card-updated", ({ id }) => {
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-move");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-move");
            }, 500);
          }
        }, 100);
      });
      this.$wire.$on("kanban-items-loaded", () => {
        this.initSortable();
      });
    },
    initSortable() {
    },
    /**
     * Helper function for success notifications (maintained for backward compatibility)
     */
    showSuccessNotification(message) {
      if (window.Filament && window.Filament.notify) {
        window.Filament.notify.success(message);
      } else {
        console.log("Success:", message);
      }
    },
    /**
     * Helper function for error notifications (maintained for backward compatibility)
     */
    showErrorNotification(message) {
      if (window.Filament && window.Filament.notify) {
        window.Filament.notify.error(message);
      } else {
        console.error("Error:", message);
      }
    }
  };
}
export {
  flowforge as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vanMvZmxvd2ZvcmdlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbG93Zm9yZ2Uoe3N0YXRlfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBjb2x1bW5zOiBzdGF0ZS5jb2x1bW5zLFxuICAgICAgICBjdXJyZW50Q29sdW1uOiBudWxsLFxuICAgICAgICBjdXJyZW50Q2FyZDogbnVsbCxcbiAgICAgICAgZm9ybURhdGE6IHt9LFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGbG93Rm9yZ2UgQWxwaW5lIGNvbXBvbmVudCBpbml0aWFsaXplZCcpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgZm9ybSBzdWJtaXNzaW9uIHN1Y2Nlc3MvZmFpbHVyZVxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1jYXJkLWNyZWF0ZWQnLCAoe2lkLCBzdGF0dXN9KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IHRoZSBuZXcgY2FyZFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFt4LXNvcnRhYmxlLWl0ZW09XCIke2lkfVwiXWApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUta2FuYmFuLWNhcmQtYWRkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWthbmJhbi1jYXJkLWFkZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1jYXJkLXVwZGF0ZWQnLCAoe2lkfSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEhpZ2hsaWdodCB0aGUgdXBkYXRlZCBjYXJkXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW3gtc29ydGFibGUtaXRlbT1cIiR7aWR9XCJdYCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1tb3ZlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWthbmJhbi1jYXJkLW1vdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3Igd2hlbiBpdGVtcyBhcmUgbG9hZGVkXG4gICAgICAgICAgICB0aGlzLiR3aXJlLiRvbigna2FuYmFuLWl0ZW1zLWxvYWRlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHNvcnRhYmxlIGZvciBuZXdseSBsb2FkZWQgaXRlbXNcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRTb3J0YWJsZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBpbml0U29ydGFibGUoKSB7XG4gICAgICAgICAgICAvLyBSZS1pbml0aWFsaXplIHNvcnRhYmxlIGZvciBhbGwgY29sdW1ucyBpZiBuZWVkZWRcbiAgICAgICAgICAgIC8vIFRoaXMgY291bGQgYmUgaW1wbGVtZW50ZWQgaWYgbmVlZGVkIGZvciBkeW5hbWljYWxseSBsb2FkZWQgY29udGVudFxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIHN1Y2Nlc3Mgbm90aWZpY2F0aW9ucyAobWFpbnRhaW5lZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcbiAgICAgICAgICovXG4gICAgICAgIHNob3dTdWNjZXNzTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgRmlsYW1lbnQgbm90aWZpY2F0aW9uIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKHdpbmRvdy5GaWxhbWVudCAmJiB3aW5kb3cuRmlsYW1lbnQubm90aWZ5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LkZpbGFtZW50Lm5vdGlmeS5zdWNjZXNzKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3VjY2VzczonLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBlcnJvciBub3RpZmljYXRpb25zIChtYWludGFpbmVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0Vycm9yTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgRmlsYW1lbnQgbm90aWZpY2F0aW9uIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKHdpbmRvdy5GaWxhbWVudCAmJiB3aW5kb3cuRmlsYW1lbnQubm90aWZ5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LkZpbGFtZW50Lm5vdGlmeS5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixVQUEyQixFQUFDLE1BQUssR0FBRztBQUN2QyxTQUFPO0FBQUEsSUFDSDtBQUFBLElBQ0EsU0FBUyxNQUFNO0FBQUEsSUFDZixlQUFlO0FBQUEsSUFDZixhQUFhO0FBQUEsSUFDYixVQUFVLENBQUM7QUFBQSxJQUVYLE1BQU0sV0FBWTtBQUNkLGNBQVEsSUFBSSx3Q0FBd0M7QUFHcEQsV0FBSyxNQUFNLElBQUksdUJBQXVCLENBQUMsRUFBQyxJQUFJLE9BQU0sTUFBTTtBQUVwRCxtQkFBVyxNQUFNO0FBQ2IsZ0JBQU0sY0FBYyxTQUFTLGNBQWMscUJBQXFCLEVBQUUsSUFBSTtBQUN0RSxjQUFJLGFBQWE7QUFDYix3QkFBWSxVQUFVLElBQUkseUJBQXlCO0FBQ25ELHVCQUFXLE1BQU07QUFDYiwwQkFBWSxVQUFVLE9BQU8seUJBQXlCO0FBQUEsWUFDMUQsR0FBRyxHQUFHO0FBQUEsVUFDVjtBQUFBLFFBQ0osR0FBRyxHQUFHO0FBQUEsTUFDVixDQUFDO0FBRUQsV0FBSyxNQUFNLElBQUksdUJBQXVCLENBQUMsRUFBQyxHQUFFLE1BQU07QUFFNUMsbUJBQVcsTUFBTTtBQUNiLGdCQUFNLGNBQWMsU0FBUyxjQUFjLHFCQUFxQixFQUFFLElBQUk7QUFDdEUsY0FBSSxhQUFhO0FBQ2Isd0JBQVksVUFBVSxJQUFJLDBCQUEwQjtBQUNwRCx1QkFBVyxNQUFNO0FBQ2IsMEJBQVksVUFBVSxPQUFPLDBCQUEwQjtBQUFBLFlBQzNELEdBQUcsR0FBRztBQUFBLFVBQ1Y7QUFBQSxRQUNKLEdBQUcsR0FBRztBQUFBLE1BQ1YsQ0FBQztBQUdELFdBQUssTUFBTSxJQUFJLHVCQUF1QixNQUFNO0FBRXhDLGFBQUssYUFBYTtBQUFBLE1BQ3RCLENBQUM7QUFBQSxJQUNMO0FBQUEsSUFFQSxlQUFlO0FBQUEsSUFHZjtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0Esd0JBQXdCLFNBQVM7QUFFN0IsVUFBSSxPQUFPLFlBQVksT0FBTyxTQUFTLFFBQVE7QUFDM0MsZUFBTyxTQUFTLE9BQU8sUUFBUSxPQUFPO0FBQUEsTUFDMUMsT0FBTztBQUNILGdCQUFRLElBQUksWUFBWSxPQUFPO0FBQUEsTUFDbkM7QUFBQSxJQUNKO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLQSxzQkFBc0IsU0FBUztBQUUzQixVQUFJLE9BQU8sWUFBWSxPQUFPLFNBQVMsUUFBUTtBQUMzQyxlQUFPLFNBQVMsT0FBTyxNQUFNLE9BQU87QUFBQSxNQUN4QyxPQUFPO0FBQ0gsZ0JBQVEsTUFBTSxVQUFVLE9BQU87QUFBQSxNQUNuQztBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
